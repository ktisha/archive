package tuzova.finiteStateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EventContainer extends BaseConcept {
  public static final String concept = "tuzova.finiteStateMachine.structure.EventContainer";
  public static final String EVENT = "event";

  public EventContainer(SNode node) {
    super(node);
  }

  public int getEventsCount() {
    return this.getChildCount(EventContainer.EVENT);
  }

  public Iterator<Event> events() {
    return this.children(Event.class, EventContainer.EVENT);
  }

  public List<Event> getEvents() {
    return this.getChildren(Event.class, EventContainer.EVENT);
  }

  public void addEvent(Event node) {
    this.addChild(EventContainer.EVENT, node);
  }

  public void insertEvent(Event prev, Event node) {
    this.insertChild(prev, EventContainer.EVENT, node);
  }


  public static EventContainer newInstance(SModel sm, boolean init) {
    return (EventContainer)SModelUtil_new.instantiateConceptDeclaration("tuzova.finiteStateMachine.structure.EventContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EventContainer newInstance(SModel sm) {
    return EventContainer.newInstance(sm, false);
  }

}
