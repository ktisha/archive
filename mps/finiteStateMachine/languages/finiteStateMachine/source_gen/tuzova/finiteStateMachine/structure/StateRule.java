package tuzova.finiteStateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StateRule extends BaseConcept implements INamedConcept {
  public static final String concept = "tuzova.finiteStateMachine.structure.StateRule";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PAIR = "pair";

  public StateRule(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(StateRule.NAME);
  }

  public void setName(String value) {
    this.setProperty(StateRule.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(StateRule.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(StateRule.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(StateRule.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(StateRule.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(StateRule.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(StateRule.VIRTUAL_PACKAGE, value);
  }

  public int getPairsCount() {
    return this.getChildCount(StateRule.PAIR);
  }

  public Iterator<Pair> pairs() {
    return this.children(Pair.class, StateRule.PAIR);
  }

  public List<Pair> getPairs() {
    return this.getChildren(Pair.class, StateRule.PAIR);
  }

  public void addPair(Pair node) {
    this.addChild(StateRule.PAIR, node);
  }

  public void insertPair(Pair prev, Pair node) {
    this.insertChild(prev, StateRule.PAIR, node);
  }


  public static StateRule newInstance(SModel sm, boolean init) {
    return (StateRule)SModelUtil_new.instantiateConceptDeclaration("tuzova.finiteStateMachine.structure.StateRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StateRule newInstance(SModel sm) {
    return StateRule.newInstance(sm, false);
  }

}
